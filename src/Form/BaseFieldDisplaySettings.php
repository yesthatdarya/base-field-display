<?php

namespace Drupal\base_field_display\Form;

use Drupal\Core\Cache\Cache;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Entity\EntityTypeManager;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Entity\EntityFieldManager;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\ContentEntityType;
use Symfony\Component\DependencyInjection\ContainerInterface;

class BaseFieldDisplaySettings extends ConfigFormBase {

  protected $entityTypeManager;

  protected $entityFieldManager;

  public function __construct(ConfigFactoryInterface $config_factory, EntityTypeManager $entityTypeManager, EntityFieldManager $entityFieldManager) {
    parent::__construct($config_factory);
    $this->entityTypeManager = $entityTypeManager;
    $this->entityFieldManager = $entityFieldManager;
  }

  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('config.factory'),
      $container->get('entity_type.manager'),
      $container->get('entity_field.manager')
    );
  }

  public function getFormId() {
    return 'base_field_display_settings_form';
  }

  public function getEditableConfigNames() {
    return ['base_field_display.settings'];
  }

  public function buildForm(array $form, FormStateInterface $form_state) {
    $config = $this->config('base_field_display.settings');
    foreach ($this->entityTypeManager->getDefinitions() as $entity_type) {
      if ($entity_type instanceof ContentEntityType) {
        $type_id = $entity_type->id();
        $form[$type_id] = [
          '#type' => 'details',
          '#title' => $entity_type->getLabel(),
          '#open' => FALSE,
          '#tree' => TRUE,
        ];
        foreach ($this->entityFieldManager->getBaseFieldDefinitions($type_id) as $field_name => $field) {
          if ($field->getType() !== 'password') {
            $form[$type_id][$field_name] = [
              '#title' => $field->getLabel(),
              '#type' => 'checkbox',
              '#default_value' => $config->get($type_id . '.' . $field_name),
            ];
          }
        }
      }
    }
    return parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $config = $this->config('base_field_display.settings');

    foreach ($this->entityTypeManager->getDefinitions() as $entity_type) {
      if ($entity_type instanceof ContentEntityType) {
        $fields = $form_state->getValue($entity_type->id());
        foreach ($fields as $field_name => $value) {
          $config->set($entity_type->id() . '.' . $field_name, $value);
        }
      }
    }

    $config->save();
    Cache::invalidateTags(['entity_field_info']);

    parent::submitForm($form, $form_state);
  }
}
