<?php

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\ContentEntityType;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_entity_base_field_info_alter().
 */
function base_field_display_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if (!$entity_type instanceof ContentEntityType) {
    return;
  }
  if ($exposed_fields = \Drupal::config('base_field_display.settings')
    ->get($entity_type->id())) {
    /** @var \Drupal\Core\Field\BaseFieldDefinition $field */
    foreach ($fields as $field_name => $field) {
      if (!empty($exposed_fields[$field_name])) {
        $field_type = $field->getType();
        $display_options = $field->getDisplayOptions('view');

        // Set display type.
        if (empty($display_options['type'])) {
          switch ($field_type) {
            case 'created':
            case 'changed':
              $display_options['type'] = 'timestamp';
              break;

            case 'entity_reference':
              $display_options['type'] = $field->getSetting('target_type') === 'user' ? 'author' : 'label';
              break;

            default:
              break;
          }
        }

        // Set default region.
        if (empty($display_options['region'])) {
          $display_options['region'] = 'hidden';
        }

        $fields[$field_name]->setDisplayConfigurable('view', TRUE);
        $fields[$field_name]->setDisplayOptions('view', $display_options);
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function base_field_display_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name === 'base_field_display.settings') {
    return '<p>' . t('Select fields to expose for each entity type on the Manage Display settings form.') . '</p>';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function base_field_display_preprocess_node(&$variables) {
  // Replace fields unset by the node module preprocess hook.
  if ($exposed_settings = \Drupal::config('base_field_display.settings')
    ->get('node')) {
    $exposed_fields = array_keys(array_filter($exposed_settings));
    $element = $variables['elements'];
    /** @var \Drupal\node\Entity\Node $node */
    $node = $element['#node'];
    $view_mode = $element['#view_mode'];
    /** @var EntityViewDisplayInterface $display */
    $display = \Drupal::service('entity_type.manager')
      ->getStorage('entity_view_display')
      ->load('node.' . $node->bundle() . '.' . $view_mode);
    if ($display) {
      foreach ($exposed_fields as $field_name) {
        $component = $display->getComponent($field_name);
        $region = $component && !empty($component['region']) ? $component['region'] : 'content';
        $variables[$region][$field_name] = $node->{$field_name}->view($view_mode);
      }
    }
  }
}
